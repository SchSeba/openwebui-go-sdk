/*
Open WebUI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebui-go-sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserInfoListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfoListResponse{}

// UserInfoListResponse struct for UserInfoListResponse
type UserInfoListResponse struct {
	Users []UserInfoResponse `json:"users"`
	Total int32 `json:"total"`
}

type _UserInfoListResponse UserInfoListResponse

// NewUserInfoListResponse instantiates a new UserInfoListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfoListResponse(users []UserInfoResponse, total int32) *UserInfoListResponse {
	this := UserInfoListResponse{}
	this.Users = users
	this.Total = total
	return &this
}

// NewUserInfoListResponseWithDefaults instantiates a new UserInfoListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoListResponseWithDefaults() *UserInfoListResponse {
	this := UserInfoListResponse{}
	return &this
}

// GetUsers returns the Users field value
func (o *UserInfoListResponse) GetUsers() []UserInfoResponse {
	if o == nil {
		var ret []UserInfoResponse
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *UserInfoListResponse) GetUsersOk() ([]UserInfoResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Users, true
}

// SetUsers sets field value
func (o *UserInfoListResponse) SetUsers(v []UserInfoResponse) {
	o.Users = v
}

// GetTotal returns the Total field value
func (o *UserInfoListResponse) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *UserInfoListResponse) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *UserInfoListResponse) SetTotal(v int32) {
	o.Total = v
}

func (o UserInfoListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfoListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["users"] = o.Users
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *UserInfoListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"users",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserInfoListResponse := _UserInfoListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserInfoListResponse)

	if err != nil {
		return err
	}

	*o = UserInfoListResponse(varUserInfoListResponse)

	return err
}

type NullableUserInfoListResponse struct {
	value *UserInfoListResponse
	isSet bool
}

func (v NullableUserInfoListResponse) Get() *UserInfoListResponse {
	return v.value
}

func (v *NullableUserInfoListResponse) Set(val *UserInfoListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfoListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfoListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfoListResponse(val *UserInfoListResponse) *NullableUserInfoListResponse {
	return &NullableUserInfoListResponse{value: val, isSet: true}
}

func (v NullableUserInfoListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfoListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


