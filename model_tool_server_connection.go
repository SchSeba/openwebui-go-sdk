/*
Open WebUI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebui-go-sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ToolServerConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolServerConnection{}

// ToolServerConnection struct for ToolServerConnection
type ToolServerConnection struct {
	Url string `json:"url"`
	Path string `json:"path"`
	AuthType AuthType `json:"auth_type"`
	Key Key `json:"key"`
	Config Config `json:"config"`
	AdditionalProperties map[string]interface{}
}

type _ToolServerConnection ToolServerConnection

// NewToolServerConnection instantiates a new ToolServerConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolServerConnection(url string, path string, authType AuthType, key Key, config Config) *ToolServerConnection {
	this := ToolServerConnection{}
	this.Url = url
	this.Path = path
	this.AuthType = authType
	this.Key = key
	this.Config = config
	return &this
}

// NewToolServerConnectionWithDefaults instantiates a new ToolServerConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolServerConnectionWithDefaults() *ToolServerConnection {
	this := ToolServerConnection{}
	return &this
}

// GetUrl returns the Url field value
func (o *ToolServerConnection) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ToolServerConnection) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ToolServerConnection) SetUrl(v string) {
	o.Url = v
}

// GetPath returns the Path field value
func (o *ToolServerConnection) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *ToolServerConnection) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *ToolServerConnection) SetPath(v string) {
	o.Path = v
}

// GetAuthType returns the AuthType field value
func (o *ToolServerConnection) GetAuthType() AuthType {
	if o == nil {
		var ret AuthType
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *ToolServerConnection) GetAuthTypeOk() (*AuthType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *ToolServerConnection) SetAuthType(v AuthType) {
	o.AuthType = v
}

// GetKey returns the Key field value
func (o *ToolServerConnection) GetKey() Key {
	if o == nil {
		var ret Key
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ToolServerConnection) GetKeyOk() (*Key, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ToolServerConnection) SetKey(v Key) {
	o.Key = v
}

// GetConfig returns the Config field value
func (o *ToolServerConnection) GetConfig() Config {
	if o == nil {
		var ret Config
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ToolServerConnection) GetConfigOk() (*Config, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *ToolServerConnection) SetConfig(v Config) {
	o.Config = v
}

func (o ToolServerConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolServerConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["path"] = o.Path
	toSerialize["auth_type"] = o.AuthType
	toSerialize["key"] = o.Key
	toSerialize["config"] = o.Config

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ToolServerConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"path",
		"auth_type",
		"key",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolServerConnection := _ToolServerConnection{}

	err = json.Unmarshal(data, &varToolServerConnection)

	if err != nil {
		return err
	}

	*o = ToolServerConnection(varToolServerConnection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "path")
		delete(additionalProperties, "auth_type")
		delete(additionalProperties, "key")
		delete(additionalProperties, "config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToolServerConnection struct {
	value *ToolServerConnection
	isSet bool
}

func (v NullableToolServerConnection) Get() *ToolServerConnection {
	return v.value
}

func (v *NullableToolServerConnection) Set(val *ToolServerConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableToolServerConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableToolServerConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolServerConnection(val *ToolServerConnection) *NullableToolServerConnection {
	return &NullableToolServerConnection{value: val, isSet: true}
}

func (v NullableToolServerConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolServerConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


