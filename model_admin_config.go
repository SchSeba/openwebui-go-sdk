/*
Open WebUI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebui

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AdminConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminConfig{}

// AdminConfig struct for AdminConfig
type AdminConfig struct {
	SHOW_ADMIN_DETAILS bool `json:"SHOW_ADMIN_DETAILS"`
	WEBUI_URL string `json:"WEBUI_URL"`
	ENABLE_SIGNUP bool `json:"ENABLE_SIGNUP"`
	ENABLE_API_KEY bool `json:"ENABLE_API_KEY"`
	ENABLE_API_KEY_ENDPOINT_RESTRICTIONS bool `json:"ENABLE_API_KEY_ENDPOINT_RESTRICTIONS"`
	API_KEY_ALLOWED_ENDPOINTS string `json:"API_KEY_ALLOWED_ENDPOINTS"`
	DEFAULT_USER_ROLE string `json:"DEFAULT_USER_ROLE"`
	JWT_EXPIRES_IN string `json:"JWT_EXPIRES_IN"`
	ENABLE_COMMUNITY_SHARING bool `json:"ENABLE_COMMUNITY_SHARING"`
	ENABLE_MESSAGE_RATING bool `json:"ENABLE_MESSAGE_RATING"`
	ENABLE_CHANNELS bool `json:"ENABLE_CHANNELS"`
	ENABLE_NOTES bool `json:"ENABLE_NOTES"`
	ENABLE_USER_WEBHOOKS bool `json:"ENABLE_USER_WEBHOOKS"`
	PENDING_USER_OVERLAY_TITLE NullableString `json:"PENDING_USER_OVERLAY_TITLE,omitempty"`
	PENDING_USER_OVERLAY_CONTENT NullableString `json:"PENDING_USER_OVERLAY_CONTENT,omitempty"`
	RESPONSE_WATERMARK NullableString `json:"RESPONSE_WATERMARK,omitempty"`
}

type _AdminConfig AdminConfig

// NewAdminConfig instantiates a new AdminConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConfig(sHOWADMINDETAILS bool, wEBUIURL string, eNABLESIGNUP bool, eNABLEAPIKEY bool, eNABLEAPIKEYENDPOINTRESTRICTIONS bool, aPIKEYALLOWEDENDPOINTS string, dEFAULTUSERROLE string, jWTEXPIRESIN string, eNABLECOMMUNITYSHARING bool, eNABLEMESSAGERATING bool, eNABLECHANNELS bool, eNABLENOTES bool, eNABLEUSERWEBHOOKS bool) *AdminConfig {
	this := AdminConfig{}
	this.SHOW_ADMIN_DETAILS = sHOWADMINDETAILS
	this.WEBUI_URL = wEBUIURL
	this.ENABLE_SIGNUP = eNABLESIGNUP
	this.ENABLE_API_KEY = eNABLEAPIKEY
	this.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = eNABLEAPIKEYENDPOINTRESTRICTIONS
	this.API_KEY_ALLOWED_ENDPOINTS = aPIKEYALLOWEDENDPOINTS
	this.DEFAULT_USER_ROLE = dEFAULTUSERROLE
	this.JWT_EXPIRES_IN = jWTEXPIRESIN
	this.ENABLE_COMMUNITY_SHARING = eNABLECOMMUNITYSHARING
	this.ENABLE_MESSAGE_RATING = eNABLEMESSAGERATING
	this.ENABLE_CHANNELS = eNABLECHANNELS
	this.ENABLE_NOTES = eNABLENOTES
	this.ENABLE_USER_WEBHOOKS = eNABLEUSERWEBHOOKS
	return &this
}

// NewAdminConfigWithDefaults instantiates a new AdminConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConfigWithDefaults() *AdminConfig {
	this := AdminConfig{}
	return &this
}

// GetSHOW_ADMIN_DETAILS returns the SHOW_ADMIN_DETAILS field value
func (o *AdminConfig) GetSHOW_ADMIN_DETAILS() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SHOW_ADMIN_DETAILS
}

// GetSHOW_ADMIN_DETAILSOk returns a tuple with the SHOW_ADMIN_DETAILS field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetSHOW_ADMIN_DETAILSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SHOW_ADMIN_DETAILS, true
}

// SetSHOW_ADMIN_DETAILS sets field value
func (o *AdminConfig) SetSHOW_ADMIN_DETAILS(v bool) {
	o.SHOW_ADMIN_DETAILS = v
}

// GetWEBUI_URL returns the WEBUI_URL field value
func (o *AdminConfig) GetWEBUI_URL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WEBUI_URL
}

// GetWEBUI_URLOk returns a tuple with the WEBUI_URL field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetWEBUI_URLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WEBUI_URL, true
}

// SetWEBUI_URL sets field value
func (o *AdminConfig) SetWEBUI_URL(v string) {
	o.WEBUI_URL = v
}

// GetENABLE_SIGNUP returns the ENABLE_SIGNUP field value
func (o *AdminConfig) GetENABLE_SIGNUP() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_SIGNUP
}

// GetENABLE_SIGNUPOk returns a tuple with the ENABLE_SIGNUP field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_SIGNUPOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_SIGNUP, true
}

// SetENABLE_SIGNUP sets field value
func (o *AdminConfig) SetENABLE_SIGNUP(v bool) {
	o.ENABLE_SIGNUP = v
}

// GetENABLE_API_KEY returns the ENABLE_API_KEY field value
func (o *AdminConfig) GetENABLE_API_KEY() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_API_KEY
}

// GetENABLE_API_KEYOk returns a tuple with the ENABLE_API_KEY field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_API_KEYOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_API_KEY, true
}

// SetENABLE_API_KEY sets field value
func (o *AdminConfig) SetENABLE_API_KEY(v bool) {
	o.ENABLE_API_KEY = v
}

// GetENABLE_API_KEY_ENDPOINT_RESTRICTIONS returns the ENABLE_API_KEY_ENDPOINT_RESTRICTIONS field value
func (o *AdminConfig) GetENABLE_API_KEY_ENDPOINT_RESTRICTIONS() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS
}

// GetENABLE_API_KEY_ENDPOINT_RESTRICTIONSOk returns a tuple with the ENABLE_API_KEY_ENDPOINT_RESTRICTIONS field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_API_KEY_ENDPOINT_RESTRICTIONSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS, true
}

// SetENABLE_API_KEY_ENDPOINT_RESTRICTIONS sets field value
func (o *AdminConfig) SetENABLE_API_KEY_ENDPOINT_RESTRICTIONS(v bool) {
	o.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS = v
}

// GetAPI_KEY_ALLOWED_ENDPOINTS returns the API_KEY_ALLOWED_ENDPOINTS field value
func (o *AdminConfig) GetAPI_KEY_ALLOWED_ENDPOINTS() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.API_KEY_ALLOWED_ENDPOINTS
}

// GetAPI_KEY_ALLOWED_ENDPOINTSOk returns a tuple with the API_KEY_ALLOWED_ENDPOINTS field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetAPI_KEY_ALLOWED_ENDPOINTSOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.API_KEY_ALLOWED_ENDPOINTS, true
}

// SetAPI_KEY_ALLOWED_ENDPOINTS sets field value
func (o *AdminConfig) SetAPI_KEY_ALLOWED_ENDPOINTS(v string) {
	o.API_KEY_ALLOWED_ENDPOINTS = v
}

// GetDEFAULT_USER_ROLE returns the DEFAULT_USER_ROLE field value
func (o *AdminConfig) GetDEFAULT_USER_ROLE() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DEFAULT_USER_ROLE
}

// GetDEFAULT_USER_ROLEOk returns a tuple with the DEFAULT_USER_ROLE field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetDEFAULT_USER_ROLEOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DEFAULT_USER_ROLE, true
}

// SetDEFAULT_USER_ROLE sets field value
func (o *AdminConfig) SetDEFAULT_USER_ROLE(v string) {
	o.DEFAULT_USER_ROLE = v
}

// GetJWT_EXPIRES_IN returns the JWT_EXPIRES_IN field value
func (o *AdminConfig) GetJWT_EXPIRES_IN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JWT_EXPIRES_IN
}

// GetJWT_EXPIRES_INOk returns a tuple with the JWT_EXPIRES_IN field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetJWT_EXPIRES_INOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JWT_EXPIRES_IN, true
}

// SetJWT_EXPIRES_IN sets field value
func (o *AdminConfig) SetJWT_EXPIRES_IN(v string) {
	o.JWT_EXPIRES_IN = v
}

// GetENABLE_COMMUNITY_SHARING returns the ENABLE_COMMUNITY_SHARING field value
func (o *AdminConfig) GetENABLE_COMMUNITY_SHARING() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_COMMUNITY_SHARING
}

// GetENABLE_COMMUNITY_SHARINGOk returns a tuple with the ENABLE_COMMUNITY_SHARING field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_COMMUNITY_SHARINGOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_COMMUNITY_SHARING, true
}

// SetENABLE_COMMUNITY_SHARING sets field value
func (o *AdminConfig) SetENABLE_COMMUNITY_SHARING(v bool) {
	o.ENABLE_COMMUNITY_SHARING = v
}

// GetENABLE_MESSAGE_RATING returns the ENABLE_MESSAGE_RATING field value
func (o *AdminConfig) GetENABLE_MESSAGE_RATING() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_MESSAGE_RATING
}

// GetENABLE_MESSAGE_RATINGOk returns a tuple with the ENABLE_MESSAGE_RATING field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_MESSAGE_RATINGOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_MESSAGE_RATING, true
}

// SetENABLE_MESSAGE_RATING sets field value
func (o *AdminConfig) SetENABLE_MESSAGE_RATING(v bool) {
	o.ENABLE_MESSAGE_RATING = v
}

// GetENABLE_CHANNELS returns the ENABLE_CHANNELS field value
func (o *AdminConfig) GetENABLE_CHANNELS() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_CHANNELS
}

// GetENABLE_CHANNELSOk returns a tuple with the ENABLE_CHANNELS field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_CHANNELSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_CHANNELS, true
}

// SetENABLE_CHANNELS sets field value
func (o *AdminConfig) SetENABLE_CHANNELS(v bool) {
	o.ENABLE_CHANNELS = v
}

// GetENABLE_NOTES returns the ENABLE_NOTES field value
func (o *AdminConfig) GetENABLE_NOTES() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_NOTES
}

// GetENABLE_NOTESOk returns a tuple with the ENABLE_NOTES field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_NOTESOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_NOTES, true
}

// SetENABLE_NOTES sets field value
func (o *AdminConfig) SetENABLE_NOTES(v bool) {
	o.ENABLE_NOTES = v
}

// GetENABLE_USER_WEBHOOKS returns the ENABLE_USER_WEBHOOKS field value
func (o *AdminConfig) GetENABLE_USER_WEBHOOKS() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_USER_WEBHOOKS
}

// GetENABLE_USER_WEBHOOKSOk returns a tuple with the ENABLE_USER_WEBHOOKS field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_USER_WEBHOOKSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_USER_WEBHOOKS, true
}

// SetENABLE_USER_WEBHOOKS sets field value
func (o *AdminConfig) SetENABLE_USER_WEBHOOKS(v bool) {
	o.ENABLE_USER_WEBHOOKS = v
}

// GetPENDING_USER_OVERLAY_TITLE returns the PENDING_USER_OVERLAY_TITLE field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdminConfig) GetPENDING_USER_OVERLAY_TITLE() string {
	if o == nil || IsNil(o.PENDING_USER_OVERLAY_TITLE.Get()) {
		var ret string
		return ret
	}
	return *o.PENDING_USER_OVERLAY_TITLE.Get()
}

// GetPENDING_USER_OVERLAY_TITLEOk returns a tuple with the PENDING_USER_OVERLAY_TITLE field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminConfig) GetPENDING_USER_OVERLAY_TITLEOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PENDING_USER_OVERLAY_TITLE.Get(), o.PENDING_USER_OVERLAY_TITLE.IsSet()
}

// HasPENDING_USER_OVERLAY_TITLE returns a boolean if a field has been set.
func (o *AdminConfig) HasPENDING_USER_OVERLAY_TITLE() bool {
	if o != nil && o.PENDING_USER_OVERLAY_TITLE.IsSet() {
		return true
	}

	return false
}

// SetPENDING_USER_OVERLAY_TITLE gets a reference to the given NullableString and assigns it to the PENDING_USER_OVERLAY_TITLE field.
func (o *AdminConfig) SetPENDING_USER_OVERLAY_TITLE(v string) {
	o.PENDING_USER_OVERLAY_TITLE.Set(&v)
}
// SetPENDING_USER_OVERLAY_TITLENil sets the value for PENDING_USER_OVERLAY_TITLE to be an explicit nil
func (o *AdminConfig) SetPENDING_USER_OVERLAY_TITLENil() {
	o.PENDING_USER_OVERLAY_TITLE.Set(nil)
}

// UnsetPENDING_USER_OVERLAY_TITLE ensures that no value is present for PENDING_USER_OVERLAY_TITLE, not even an explicit nil
func (o *AdminConfig) UnsetPENDING_USER_OVERLAY_TITLE() {
	o.PENDING_USER_OVERLAY_TITLE.Unset()
}

// GetPENDING_USER_OVERLAY_CONTENT returns the PENDING_USER_OVERLAY_CONTENT field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdminConfig) GetPENDING_USER_OVERLAY_CONTENT() string {
	if o == nil || IsNil(o.PENDING_USER_OVERLAY_CONTENT.Get()) {
		var ret string
		return ret
	}
	return *o.PENDING_USER_OVERLAY_CONTENT.Get()
}

// GetPENDING_USER_OVERLAY_CONTENTOk returns a tuple with the PENDING_USER_OVERLAY_CONTENT field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminConfig) GetPENDING_USER_OVERLAY_CONTENTOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PENDING_USER_OVERLAY_CONTENT.Get(), o.PENDING_USER_OVERLAY_CONTENT.IsSet()
}

// HasPENDING_USER_OVERLAY_CONTENT returns a boolean if a field has been set.
func (o *AdminConfig) HasPENDING_USER_OVERLAY_CONTENT() bool {
	if o != nil && o.PENDING_USER_OVERLAY_CONTENT.IsSet() {
		return true
	}

	return false
}

// SetPENDING_USER_OVERLAY_CONTENT gets a reference to the given NullableString and assigns it to the PENDING_USER_OVERLAY_CONTENT field.
func (o *AdminConfig) SetPENDING_USER_OVERLAY_CONTENT(v string) {
	o.PENDING_USER_OVERLAY_CONTENT.Set(&v)
}
// SetPENDING_USER_OVERLAY_CONTENTNil sets the value for PENDING_USER_OVERLAY_CONTENT to be an explicit nil
func (o *AdminConfig) SetPENDING_USER_OVERLAY_CONTENTNil() {
	o.PENDING_USER_OVERLAY_CONTENT.Set(nil)
}

// UnsetPENDING_USER_OVERLAY_CONTENT ensures that no value is present for PENDING_USER_OVERLAY_CONTENT, not even an explicit nil
func (o *AdminConfig) UnsetPENDING_USER_OVERLAY_CONTENT() {
	o.PENDING_USER_OVERLAY_CONTENT.Unset()
}

// GetRESPONSE_WATERMARK returns the RESPONSE_WATERMARK field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdminConfig) GetRESPONSE_WATERMARK() string {
	if o == nil || IsNil(o.RESPONSE_WATERMARK.Get()) {
		var ret string
		return ret
	}
	return *o.RESPONSE_WATERMARK.Get()
}

// GetRESPONSE_WATERMARKOk returns a tuple with the RESPONSE_WATERMARK field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdminConfig) GetRESPONSE_WATERMARKOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RESPONSE_WATERMARK.Get(), o.RESPONSE_WATERMARK.IsSet()
}

// HasRESPONSE_WATERMARK returns a boolean if a field has been set.
func (o *AdminConfig) HasRESPONSE_WATERMARK() bool {
	if o != nil && o.RESPONSE_WATERMARK.IsSet() {
		return true
	}

	return false
}

// SetRESPONSE_WATERMARK gets a reference to the given NullableString and assigns it to the RESPONSE_WATERMARK field.
func (o *AdminConfig) SetRESPONSE_WATERMARK(v string) {
	o.RESPONSE_WATERMARK.Set(&v)
}
// SetRESPONSE_WATERMARKNil sets the value for RESPONSE_WATERMARK to be an explicit nil
func (o *AdminConfig) SetRESPONSE_WATERMARKNil() {
	o.RESPONSE_WATERMARK.Set(nil)
}

// UnsetRESPONSE_WATERMARK ensures that no value is present for RESPONSE_WATERMARK, not even an explicit nil
func (o *AdminConfig) UnsetRESPONSE_WATERMARK() {
	o.RESPONSE_WATERMARK.Unset()
}

func (o AdminConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["SHOW_ADMIN_DETAILS"] = o.SHOW_ADMIN_DETAILS
	toSerialize["WEBUI_URL"] = o.WEBUI_URL
	toSerialize["ENABLE_SIGNUP"] = o.ENABLE_SIGNUP
	toSerialize["ENABLE_API_KEY"] = o.ENABLE_API_KEY
	toSerialize["ENABLE_API_KEY_ENDPOINT_RESTRICTIONS"] = o.ENABLE_API_KEY_ENDPOINT_RESTRICTIONS
	toSerialize["API_KEY_ALLOWED_ENDPOINTS"] = o.API_KEY_ALLOWED_ENDPOINTS
	toSerialize["DEFAULT_USER_ROLE"] = o.DEFAULT_USER_ROLE
	toSerialize["JWT_EXPIRES_IN"] = o.JWT_EXPIRES_IN
	toSerialize["ENABLE_COMMUNITY_SHARING"] = o.ENABLE_COMMUNITY_SHARING
	toSerialize["ENABLE_MESSAGE_RATING"] = o.ENABLE_MESSAGE_RATING
	toSerialize["ENABLE_CHANNELS"] = o.ENABLE_CHANNELS
	toSerialize["ENABLE_NOTES"] = o.ENABLE_NOTES
	toSerialize["ENABLE_USER_WEBHOOKS"] = o.ENABLE_USER_WEBHOOKS
	if o.PENDING_USER_OVERLAY_TITLE.IsSet() {
		toSerialize["PENDING_USER_OVERLAY_TITLE"] = o.PENDING_USER_OVERLAY_TITLE.Get()
	}
	if o.PENDING_USER_OVERLAY_CONTENT.IsSet() {
		toSerialize["PENDING_USER_OVERLAY_CONTENT"] = o.PENDING_USER_OVERLAY_CONTENT.Get()
	}
	if o.RESPONSE_WATERMARK.IsSet() {
		toSerialize["RESPONSE_WATERMARK"] = o.RESPONSE_WATERMARK.Get()
	}
	return toSerialize, nil
}

func (o *AdminConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"SHOW_ADMIN_DETAILS",
		"WEBUI_URL",
		"ENABLE_SIGNUP",
		"ENABLE_API_KEY",
		"ENABLE_API_KEY_ENDPOINT_RESTRICTIONS",
		"API_KEY_ALLOWED_ENDPOINTS",
		"DEFAULT_USER_ROLE",
		"JWT_EXPIRES_IN",
		"ENABLE_COMMUNITY_SHARING",
		"ENABLE_MESSAGE_RATING",
		"ENABLE_CHANNELS",
		"ENABLE_NOTES",
		"ENABLE_USER_WEBHOOKS",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminConfig := _AdminConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdminConfig)

	if err != nil {
		return err
	}

	*o = AdminConfig(varAdminConfig)

	return err
}

type NullableAdminConfig struct {
	value *AdminConfig
	isSet bool
}

func (v NullableAdminConfig) Get() *AdminConfig {
	return v.value
}

func (v *NullableAdminConfig) Set(val *AdminConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConfig(val *AdminConfig) *NullableAdminConfig {
	return &NullableAdminConfig{value: val, isSet: true}
}

func (v NullableAdminConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


