/*
Open WebUI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebui-go-sdk

import (
	"encoding/json"
)

// checks if the ModelNameForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelNameForm{}

// ModelNameForm struct for ModelNameForm
type ModelNameForm struct {
	Model *Model `json:"model,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelNameForm ModelNameForm

// NewModelNameForm instantiates a new ModelNameForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelNameForm() *ModelNameForm {
	this := ModelNameForm{}
	return &this
}

// NewModelNameFormWithDefaults instantiates a new ModelNameForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelNameFormWithDefaults() *ModelNameForm {
	this := ModelNameForm{}
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ModelNameForm) GetModel() Model {
	if o == nil || IsNil(o.Model) {
		var ret Model
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelNameForm) GetModelOk() (*Model, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ModelNameForm) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given Model and assigns it to the Model field.
func (o *ModelNameForm) SetModel(v Model) {
	o.Model = &v
}

func (o ModelNameForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelNameForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelNameForm) UnmarshalJSON(data []byte) (err error) {
	varModelNameForm := _ModelNameForm{}

	err = json.Unmarshal(data, &varModelNameForm)

	if err != nil {
		return err
	}

	*o = ModelNameForm(varModelNameForm)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelNameForm struct {
	value *ModelNameForm
	isSet bool
}

func (v NullableModelNameForm) Get() *ModelNameForm {
	return v.value
}

func (v *NullableModelNameForm) Set(val *ModelNameForm) {
	v.value = val
	v.isSet = true
}

func (v NullableModelNameForm) IsSet() bool {
	return v.isSet
}

func (v *NullableModelNameForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelNameForm(val *ModelNameForm) *NullableModelNameForm {
	return &NullableModelNameForm{value: val, isSet: true}
}

func (v NullableModelNameForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelNameForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


