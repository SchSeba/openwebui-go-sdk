/*
Open WebUI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebui

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ConfigsAPIService ConfigsAPI service
type ConfigsAPIService service

type ApiExportConfigApiV1ConfigsExportGetRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
}

func (r ApiExportConfigApiV1ConfigsExportGetRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ExportConfigApiV1ConfigsExportGetExecute(r)
}

/*
ExportConfigApiV1ConfigsExportGet Export Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExportConfigApiV1ConfigsExportGetRequest
*/
func (a *ConfigsAPIService) ExportConfigApiV1ConfigsExportGet(ctx context.Context) ApiExportConfigApiV1ConfigsExportGetRequest {
	return ApiExportConfigApiV1ConfigsExportGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigsAPIService) ExportConfigApiV1ConfigsExportGetExecute(r ApiExportConfigApiV1ConfigsExportGetRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.ExportConfigApiV1ConfigsExportGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBannersApiV1ConfigsBannersGetRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
}

func (r ApiGetBannersApiV1ConfigsBannersGetRequest) Execute() ([]BannerModel, *http.Response, error) {
	return r.ApiService.GetBannersApiV1ConfigsBannersGetExecute(r)
}

/*
GetBannersApiV1ConfigsBannersGet Get Banners

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBannersApiV1ConfigsBannersGetRequest
*/
func (a *ConfigsAPIService) GetBannersApiV1ConfigsBannersGet(ctx context.Context) ApiGetBannersApiV1ConfigsBannersGetRequest {
	return ApiGetBannersApiV1ConfigsBannersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BannerModel
func (a *ConfigsAPIService) GetBannersApiV1ConfigsBannersGetExecute(r ApiGetBannersApiV1ConfigsBannersGetRequest) ([]BannerModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BannerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.GetBannersApiV1ConfigsBannersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/banners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
}

func (r ApiGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetRequest) Execute() (*CodeInterpreterConfigForm, *http.Response, error) {
	return r.ApiService.GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetExecute(r)
}

/*
GetCodeExecutionConfigApiV1ConfigsCodeExecutionGet Get Code Execution Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetRequest
*/
func (a *ConfigsAPIService) GetCodeExecutionConfigApiV1ConfigsCodeExecutionGet(ctx context.Context) ApiGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetRequest {
	return ApiGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CodeInterpreterConfigForm
func (a *ConfigsAPIService) GetCodeExecutionConfigApiV1ConfigsCodeExecutionGetExecute(r ApiGetCodeExecutionConfigApiV1ConfigsCodeExecutionGetRequest) (*CodeInterpreterConfigForm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CodeInterpreterConfigForm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.GetCodeExecutionConfigApiV1ConfigsCodeExecutionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/code_execution"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConnectionsConfigApiV1ConfigsConnectionsGetRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
}

func (r ApiGetConnectionsConfigApiV1ConfigsConnectionsGetRequest) Execute() (*ConnectionsConfigForm, *http.Response, error) {
	return r.ApiService.GetConnectionsConfigApiV1ConfigsConnectionsGetExecute(r)
}

/*
GetConnectionsConfigApiV1ConfigsConnectionsGet Get Connections Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetConnectionsConfigApiV1ConfigsConnectionsGetRequest
*/
func (a *ConfigsAPIService) GetConnectionsConfigApiV1ConfigsConnectionsGet(ctx context.Context) ApiGetConnectionsConfigApiV1ConfigsConnectionsGetRequest {
	return ApiGetConnectionsConfigApiV1ConfigsConnectionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConnectionsConfigForm
func (a *ConfigsAPIService) GetConnectionsConfigApiV1ConfigsConnectionsGetExecute(r ApiGetConnectionsConfigApiV1ConfigsConnectionsGetRequest) (*ConnectionsConfigForm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectionsConfigForm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.GetConnectionsConfigApiV1ConfigsConnectionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetModelsConfigApiV1ConfigsModelsGetRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
}

func (r ApiGetModelsConfigApiV1ConfigsModelsGetRequest) Execute() (*ModelsConfigForm, *http.Response, error) {
	return r.ApiService.GetModelsConfigApiV1ConfigsModelsGetExecute(r)
}

/*
GetModelsConfigApiV1ConfigsModelsGet Get Models Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetModelsConfigApiV1ConfigsModelsGetRequest
*/
func (a *ConfigsAPIService) GetModelsConfigApiV1ConfigsModelsGet(ctx context.Context) ApiGetModelsConfigApiV1ConfigsModelsGetRequest {
	return ApiGetModelsConfigApiV1ConfigsModelsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsConfigForm
func (a *ConfigsAPIService) GetModelsConfigApiV1ConfigsModelsGetExecute(r ApiGetModelsConfigApiV1ConfigsModelsGetRequest) (*ModelsConfigForm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsConfigForm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.GetModelsConfigApiV1ConfigsModelsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetToolServersConfigApiV1ConfigsToolServersGetRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
}

func (r ApiGetToolServersConfigApiV1ConfigsToolServersGetRequest) Execute() (*ToolServersConfigForm, *http.Response, error) {
	return r.ApiService.GetToolServersConfigApiV1ConfigsToolServersGetExecute(r)
}

/*
GetToolServersConfigApiV1ConfigsToolServersGet Get Tool Servers Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetToolServersConfigApiV1ConfigsToolServersGetRequest
*/
func (a *ConfigsAPIService) GetToolServersConfigApiV1ConfigsToolServersGet(ctx context.Context) ApiGetToolServersConfigApiV1ConfigsToolServersGetRequest {
	return ApiGetToolServersConfigApiV1ConfigsToolServersGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ToolServersConfigForm
func (a *ConfigsAPIService) GetToolServersConfigApiV1ConfigsToolServersGetExecute(r ApiGetToolServersConfigApiV1ConfigsToolServersGetRequest) (*ToolServersConfigForm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ToolServersConfigForm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.GetToolServersConfigApiV1ConfigsToolServersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/tool_servers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImportConfigApiV1ConfigsImportPostRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
	importConfigForm *ImportConfigForm
}

func (r ApiImportConfigApiV1ConfigsImportPostRequest) ImportConfigForm(importConfigForm ImportConfigForm) ApiImportConfigApiV1ConfigsImportPostRequest {
	r.importConfigForm = &importConfigForm
	return r
}

func (r ApiImportConfigApiV1ConfigsImportPostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ImportConfigApiV1ConfigsImportPostExecute(r)
}

/*
ImportConfigApiV1ConfigsImportPost Import Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiImportConfigApiV1ConfigsImportPostRequest
*/
func (a *ConfigsAPIService) ImportConfigApiV1ConfigsImportPost(ctx context.Context) ApiImportConfigApiV1ConfigsImportPostRequest {
	return ApiImportConfigApiV1ConfigsImportPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ConfigsAPIService) ImportConfigApiV1ConfigsImportPostExecute(r ApiImportConfigApiV1ConfigsImportPostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.ImportConfigApiV1ConfigsImportPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.importConfigForm == nil {
		return localVarReturnValue, nil, reportError("importConfigForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.importConfigForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetBannersApiV1ConfigsBannersPostRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
	setBannersForm *SetBannersForm
}

func (r ApiSetBannersApiV1ConfigsBannersPostRequest) SetBannersForm(setBannersForm SetBannersForm) ApiSetBannersApiV1ConfigsBannersPostRequest {
	r.setBannersForm = &setBannersForm
	return r
}

func (r ApiSetBannersApiV1ConfigsBannersPostRequest) Execute() ([]BannerModel, *http.Response, error) {
	return r.ApiService.SetBannersApiV1ConfigsBannersPostExecute(r)
}

/*
SetBannersApiV1ConfigsBannersPost Set Banners

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetBannersApiV1ConfigsBannersPostRequest
*/
func (a *ConfigsAPIService) SetBannersApiV1ConfigsBannersPost(ctx context.Context) ApiSetBannersApiV1ConfigsBannersPostRequest {
	return ApiSetBannersApiV1ConfigsBannersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BannerModel
func (a *ConfigsAPIService) SetBannersApiV1ConfigsBannersPostExecute(r ApiSetBannersApiV1ConfigsBannersPostRequest) ([]BannerModel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BannerModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.SetBannersApiV1ConfigsBannersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/banners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setBannersForm == nil {
		return localVarReturnValue, nil, reportError("setBannersForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setBannersForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
	codeInterpreterConfigForm *CodeInterpreterConfigForm
}

func (r ApiSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostRequest) CodeInterpreterConfigForm(codeInterpreterConfigForm CodeInterpreterConfigForm) ApiSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostRequest {
	r.codeInterpreterConfigForm = &codeInterpreterConfigForm
	return r
}

func (r ApiSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostRequest) Execute() (*CodeInterpreterConfigForm, *http.Response, error) {
	return r.ApiService.SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostExecute(r)
}

/*
SetCodeExecutionConfigApiV1ConfigsCodeExecutionPost Set Code Execution Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostRequest
*/
func (a *ConfigsAPIService) SetCodeExecutionConfigApiV1ConfigsCodeExecutionPost(ctx context.Context) ApiSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostRequest {
	return ApiSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CodeInterpreterConfigForm
func (a *ConfigsAPIService) SetCodeExecutionConfigApiV1ConfigsCodeExecutionPostExecute(r ApiSetCodeExecutionConfigApiV1ConfigsCodeExecutionPostRequest) (*CodeInterpreterConfigForm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CodeInterpreterConfigForm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.SetCodeExecutionConfigApiV1ConfigsCodeExecutionPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/code_execution"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.codeInterpreterConfigForm == nil {
		return localVarReturnValue, nil, reportError("codeInterpreterConfigForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.codeInterpreterConfigForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetConnectionsConfigApiV1ConfigsConnectionsPostRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
	connectionsConfigForm *ConnectionsConfigForm
}

func (r ApiSetConnectionsConfigApiV1ConfigsConnectionsPostRequest) ConnectionsConfigForm(connectionsConfigForm ConnectionsConfigForm) ApiSetConnectionsConfigApiV1ConfigsConnectionsPostRequest {
	r.connectionsConfigForm = &connectionsConfigForm
	return r
}

func (r ApiSetConnectionsConfigApiV1ConfigsConnectionsPostRequest) Execute() (*ConnectionsConfigForm, *http.Response, error) {
	return r.ApiService.SetConnectionsConfigApiV1ConfigsConnectionsPostExecute(r)
}

/*
SetConnectionsConfigApiV1ConfigsConnectionsPost Set Connections Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetConnectionsConfigApiV1ConfigsConnectionsPostRequest
*/
func (a *ConfigsAPIService) SetConnectionsConfigApiV1ConfigsConnectionsPost(ctx context.Context) ApiSetConnectionsConfigApiV1ConfigsConnectionsPostRequest {
	return ApiSetConnectionsConfigApiV1ConfigsConnectionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConnectionsConfigForm
func (a *ConfigsAPIService) SetConnectionsConfigApiV1ConfigsConnectionsPostExecute(r ApiSetConnectionsConfigApiV1ConfigsConnectionsPostRequest) (*ConnectionsConfigForm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectionsConfigForm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.SetConnectionsConfigApiV1ConfigsConnectionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectionsConfigForm == nil {
		return localVarReturnValue, nil, reportError("connectionsConfigForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectionsConfigForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetDefaultSuggestionsApiV1ConfigsSuggestionsPostRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
	setDefaultSuggestionsForm *SetDefaultSuggestionsForm
}

func (r ApiSetDefaultSuggestionsApiV1ConfigsSuggestionsPostRequest) SetDefaultSuggestionsForm(setDefaultSuggestionsForm SetDefaultSuggestionsForm) ApiSetDefaultSuggestionsApiV1ConfigsSuggestionsPostRequest {
	r.setDefaultSuggestionsForm = &setDefaultSuggestionsForm
	return r
}

func (r ApiSetDefaultSuggestionsApiV1ConfigsSuggestionsPostRequest) Execute() ([]PromptSuggestion, *http.Response, error) {
	return r.ApiService.SetDefaultSuggestionsApiV1ConfigsSuggestionsPostExecute(r)
}

/*
SetDefaultSuggestionsApiV1ConfigsSuggestionsPost Set Default Suggestions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetDefaultSuggestionsApiV1ConfigsSuggestionsPostRequest
*/
func (a *ConfigsAPIService) SetDefaultSuggestionsApiV1ConfigsSuggestionsPost(ctx context.Context) ApiSetDefaultSuggestionsApiV1ConfigsSuggestionsPostRequest {
	return ApiSetDefaultSuggestionsApiV1ConfigsSuggestionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PromptSuggestion
func (a *ConfigsAPIService) SetDefaultSuggestionsApiV1ConfigsSuggestionsPostExecute(r ApiSetDefaultSuggestionsApiV1ConfigsSuggestionsPostRequest) ([]PromptSuggestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PromptSuggestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.SetDefaultSuggestionsApiV1ConfigsSuggestionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/suggestions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.setDefaultSuggestionsForm == nil {
		return localVarReturnValue, nil, reportError("setDefaultSuggestionsForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.setDefaultSuggestionsForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetModelsConfigApiV1ConfigsModelsPostRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
	modelsConfigForm *ModelsConfigForm
}

func (r ApiSetModelsConfigApiV1ConfigsModelsPostRequest) ModelsConfigForm(modelsConfigForm ModelsConfigForm) ApiSetModelsConfigApiV1ConfigsModelsPostRequest {
	r.modelsConfigForm = &modelsConfigForm
	return r
}

func (r ApiSetModelsConfigApiV1ConfigsModelsPostRequest) Execute() (*ModelsConfigForm, *http.Response, error) {
	return r.ApiService.SetModelsConfigApiV1ConfigsModelsPostExecute(r)
}

/*
SetModelsConfigApiV1ConfigsModelsPost Set Models Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetModelsConfigApiV1ConfigsModelsPostRequest
*/
func (a *ConfigsAPIService) SetModelsConfigApiV1ConfigsModelsPost(ctx context.Context) ApiSetModelsConfigApiV1ConfigsModelsPostRequest {
	return ApiSetModelsConfigApiV1ConfigsModelsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsConfigForm
func (a *ConfigsAPIService) SetModelsConfigApiV1ConfigsModelsPostExecute(r ApiSetModelsConfigApiV1ConfigsModelsPostRequest) (*ModelsConfigForm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsConfigForm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.SetModelsConfigApiV1ConfigsModelsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelsConfigForm == nil {
		return localVarReturnValue, nil, reportError("modelsConfigForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelsConfigForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSetToolServersConfigApiV1ConfigsToolServersPostRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
	toolServersConfigForm *ToolServersConfigForm
}

func (r ApiSetToolServersConfigApiV1ConfigsToolServersPostRequest) ToolServersConfigForm(toolServersConfigForm ToolServersConfigForm) ApiSetToolServersConfigApiV1ConfigsToolServersPostRequest {
	r.toolServersConfigForm = &toolServersConfigForm
	return r
}

func (r ApiSetToolServersConfigApiV1ConfigsToolServersPostRequest) Execute() (*ToolServersConfigForm, *http.Response, error) {
	return r.ApiService.SetToolServersConfigApiV1ConfigsToolServersPostExecute(r)
}

/*
SetToolServersConfigApiV1ConfigsToolServersPost Set Tool Servers Config

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSetToolServersConfigApiV1ConfigsToolServersPostRequest
*/
func (a *ConfigsAPIService) SetToolServersConfigApiV1ConfigsToolServersPost(ctx context.Context) ApiSetToolServersConfigApiV1ConfigsToolServersPostRequest {
	return ApiSetToolServersConfigApiV1ConfigsToolServersPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ToolServersConfigForm
func (a *ConfigsAPIService) SetToolServersConfigApiV1ConfigsToolServersPostExecute(r ApiSetToolServersConfigApiV1ConfigsToolServersPostRequest) (*ToolServersConfigForm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ToolServersConfigForm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.SetToolServersConfigApiV1ConfigsToolServersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/tool_servers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.toolServersConfigForm == nil {
		return localVarReturnValue, nil, reportError("toolServersConfigForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.toolServersConfigForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostRequest struct {
	ctx context.Context
	ApiService *ConfigsAPIService
	toolServerConnection *ToolServerConnection
}

func (r ApiVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostRequest) ToolServerConnection(toolServerConnection ToolServerConnection) ApiVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostRequest {
	r.toolServerConnection = &toolServerConnection
	return r
}

func (r ApiVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostExecute(r)
}

/*
VerifyToolServersConfigApiV1ConfigsToolServersVerifyPost Verify Tool Servers Config

Verify the connection to the tool server.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostRequest
*/
func (a *ConfigsAPIService) VerifyToolServersConfigApiV1ConfigsToolServersVerifyPost(ctx context.Context) ApiVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostRequest {
	return ApiVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *ConfigsAPIService) VerifyToolServersConfigApiV1ConfigsToolServersVerifyPostExecute(r ApiVerifyToolServersConfigApiV1ConfigsToolServersVerifyPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigsAPIService.VerifyToolServersConfigApiV1ConfigsToolServersVerifyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/configs/tool_servers/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.toolServerConnection == nil {
		return localVarReturnValue, nil, reportError("toolServerConnection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.toolServerConnection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
